#==========基础配置==========
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
allow-lan: true
bind-address: '*'
mode: rule
log-level: silent  # 禁用日志，减少性能损耗
ipv6: true
external-controller: :9090
external-ui: dashboard
secret: ''  # 如果不需要密码，可以留空

# 新增: tproxy端口，用于支持透明代理
tproxy-port: 7895

#==========DNS 设置==========
dns:
  enable: true
  ipv6: true
  listen: 0.0.0.0:53
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter:
    - '*.lan'
    - 'localhost.ptlogin2.qq.com'
    - '*.local'
    - '*.crashlytics.com'
  use-hosts: true
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - 223.5.5.5
    - 119.29.29.29
    - 223.6.6.6
    - 180.76.76.76
  fallback:
    - tls://1.1.1.1:853
    - tls://8.8.8.8:853
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - 114.114.114.114
    - 223.5.5.5
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - 223.6.6.6
    - 180.76.76.76
  nameserver-policy:
    'www.google.com': [8.8.8.8, 8.8.4.4]
    '+.github.com': [1.1.1.1, 8.8.8.8]
    '+.facebook.com': [1.1.1.1, 8.8.8.8]
    '+.twitter.com': [1.1.1.1, 8.8.8.8]
  cache: true
  cache-size: 20000

#==========代理提供商==========
proxy-providers:
  tudou:
    type: http
    url: https://even.axxi.site/api/v1/client/subscribe?token=f0d5eda7efd87a99e2e94f8790276706  # 已替换为您的订阅链接
    interval: 3600
    path: ./proxies/tudou.yaml
    health-check:
      enable: true
      interval: 600
      url: http://www.gstatic.com/generate_204

#==========代理组==========
proxy-groups:
  - name: Claude
    type: select
    use:
      - tudou

  - name: Auto
    type: url-test
    use:
      - tudou
    url: 'http://www.gstatic.com/generate_204'
    interval: 600  # 调整测试间隔为10分钟
    tolerance: 50

  - name: Fallback
    type: fallback
    use:
      - tudou
    url: 'http://www.gstatic.com/generate_204'
    interval: 600

  - name: LoadBalance
    type: load-balance
    use:
      - tudou
    url: 'http://www.gstatic.com/generate_204'
    interval: 600
    strategy: consistent-hashing

  - name: Proxy
    type: select
    use:
      - tudou
    proxies:
      - Auto
      - Fallback
      - LoadBalance
      - DIRECT

  - name: Streaming
    type: select
    use:
      - tudou
    proxies:
      - Auto
      - Proxy

  - name: Gaming
    type: url-test
    use:
      - tudou
    url: 'http://www.gstatic.com/generate_204'
    interval: 600
    tolerance: 50

  - name: GlobalMedia
    type: select
    proxies:
      - Proxy
      - Auto
      - DIRECT

  - name: Telegram
    type: select
    proxies:
      - Proxy
      - Auto
      - DIRECT

  - name: Apple
    type: select
    proxies:
      - DIRECT
      - Proxy
      - Auto

  - name: Microsoft
    type: select
    proxies:
      - DIRECT
      - Proxy
      - Auto

  - name: AI_Services
    type: select
    use:
      - tudou
    proxies:
      - Auto
      - Proxy
    filter: '(?i)美国|美國|US|United States'

  - name: Netflix
    type: select
    use:
      - tudou
    proxies:
      - Auto
      - Proxy
      - DIRECT

  - name: YouTube
    type: select
    use:
      - tudou
    proxies:
      - Auto
      - Proxy
      - DIRECT

  # 新增 Facebook 代理组
  - name: Facebook
    type: select
    proxies:
      - Proxy
      - Auto
      - DIRECT

  # 新增 Twitter 代理组
  - name: Twitter
    type: select
    proxies:
      - Proxy
      - Auto
      - DIRECT

#==========规则提供商==========
rule-providers:
  reject:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
    path: ./ruleset/reject.yaml
    interval: 86400

  icloud:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
    path: ./ruleset/icloud.yaml
    interval: 86400

  apple:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
    path: ./ruleset/apple.yaml
    interval: 86400

  google:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
    path: ./ruleset/google.yaml
    interval: 86400

  proxy:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
    path: ./ruleset/proxy.yaml
    interval: 86400

  direct:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
    path: ./ruleset/direct.yaml
    interval: 86400

  private:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
    path: ./ruleset/private.yaml
    interval: 86400

  gfw:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
    path: ./ruleset/gfw.yaml
    interval: 86400

  greatfire:
    type: http
    behavior: domain
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt"
    path: ./ruleset/greatfire.yaml
    interval: 86400

  cncidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
    path: ./ruleset/cncidr.yaml
    interval: 86400

  lancidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
    path: ./ruleset/lancidr.yaml
    interval: 86400

  telegramcidr:
    type: http
    behavior: ipcidr
    url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
    path: ./ruleset/telegramcidr.yaml
    interval: 86400

  globalmedia:
    type: http
    behavior: classical
    url: "https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/StreamingMedia/Streaming.yaml"
    path: ./ruleset/globalmedia.yaml
    interval: 86400

  microsoft:
    type: http
    behavior: classical
    url: "https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/Extra/Microsoft/Microsoft.yaml"
    path: ./ruleset/microsoft.yaml
    interval: 86400

#==========规则==========
rules:
  # Claude 专用规则
  - DOMAIN-SUFFIX,anthropic.com,Claude
  - DOMAIN-SUFFIX,claude.ai,Claude
  - DOMAIN-KEYWORD,claude,Claude

  - DOMAIN-SUFFIX,openai.com,AI_Services
  - DOMAIN-SUFFIX,ai.com,AI_Services
  - DOMAIN-SUFFIX,perplexity.ai,AI_Services
  - DOMAIN-KEYWORD,openai,AI_Services
  - DOMAIN-KEYWORD,chatgpt,AI_Services

  # 新增 Facebook 规则
  - DOMAIN-SUFFIX,facebook.com,Facebook
  - DOMAIN-SUFFIX,fbcdn.net,Facebook
  - DOMAIN-SUFFIX,fb.com,Facebook
  - DOMAIN-SUFFIX,instagram.com,Facebook

  # 新增 Twitter 规则
  - DOMAIN-SUFFIX,twitter.com,Twitter
  - DOMAIN-SUFFIX,t.co,Twitter
  - DOMAIN-SUFFIX,twimg.com,Twitter

  - DOMAIN-SUFFIX,webrtc.org,REJECT
  - DOMAIN-SUFFIX,rtc.org,REJECT
  - DOMAIN-SUFFIX,peerconnection.org,REJECT
  - RULE-SET,private,DIRECT
  - RULE-SET,reject,REJECT
  - RULE-SET,icloud,DIRECT
  - RULE-SET,apple,Apple
  - RULE-SET,google,Proxy
  - RULE-SET,proxy,Proxy
  - RULE-SET,direct,DIRECT
  - RULE-SET,lancidr,DIRECT
  - RULE-SET,cncidr,DIRECT
  - RULE-SET,telegramcidr,Telegram
  - RULE-SET,gfw,Proxy
  - RULE-SET,greatfire,Proxy
  - RULE-SET,globalmedia,GlobalMedia
  - RULE-SET,microsoft,Microsoft
  - DOMAIN-KEYWORD,netflix,Netflix
  - DOMAIN-SUFFIX,netflix.com,Netflix
  - DOMAIN-SUFFIX,netflix.net,Netflix
  - DOMAIN-KEYWORD,youtube,YouTube
  - DOMAIN-SUFFIX,youtube.com,YouTube
  - DOMAIN-SUFFIX,googlevideo.com,YouTube
  - DOMAIN-SUFFIX,example.com,DIRECT
  - IP-CIDR,192.168.0.0/16,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,Proxy

#==========高级功能==========
tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
    - tcp://any:53
  auto-route: true
  auto-detect-interface: true
  mtu: 1492  # 调整MTU值，适应PPPoE拨号的软路由
  routing-mark: 6666  # 确保与 experimental 部分一致

profile:
  store-selected: true
  store-fake-ip: true
  tracing: true  # 启用流量统计

sniffer:
  enable: true
  sniffing:
    - tls
    - http
  force-domain:
    - '+.google.com'
    - '+.facebook.com'
    - '+.youtube.com'
  skip-domain:
    - 'Mijia Cloud'
    - '+.apple.com'
  port-whitelist:
    - 80
    - 443

#==========性能优化==========
tcp-concurrent: true
udp: true
quic: true
mptcp: true

experimental:
  interface-name: eth0
  routing-mark: 6666  # 确保与 tun 部分一致
  network-config:
    tcp:
      congestion-algorithm: bbr
  ebpf:
    auto-redir: true
    redirect-to-tun:
      - eth0
  udpv6: true
  ignore-resolve-fail: true
  sniff-tls-sni: true
  tracing: true

#==========定时任务==========
cron:
  - '0 8 * * * clash-switch-config-work'
  - '0 18 * * * clash-switch-config-home'

#==========多配置文件支持==========
config-reload: true
configs:
  - config1.yaml
  - config2.yaml

#==========TLS 指纹==========
tls:
  fingerprint: chrome
  # 使用 OpenClash 的默认设置
  certificate: '/etc/openclash/ssl.crt'  # OpenClash 默认证书路径
  sni: ''  # 如不需要自定义 SNI，可留空
  alpn:
    - h2
    - http/1.1
  session-caching: true
  session-timeout: 3600

#==========脚本支持==========
script:
  code: |
    import time
    import re
    import random
    from datetime import datetime
    import requests
    import geoip2.database

    # 初始化 GeoIP 数据库
    geoip_reader = geoip2.database.Reader('/etc/openclash/GeoLite2-Country.mmdb')  # OpenClash 默认路径

    # 动态获取代理列表
    def get_proxies():
        # 从代理提供商加载代理列表
        proxies = ctx.get_proxies()
        proxy_names = [proxy['name'] for proxy in proxies]
        return proxy_names

    # 代理速度缓存
    proxy_speeds = {}

    # 电信友好域名列表（扩展）
    TELECOM_FRIENDLY_DOMAINS = [
        'chinaz.com', 'chinaz.net', 'cnzz.com', 'taobao.com', 'alipay.com',
        'tmall.com', 'jd.com', 'baidu.com', 'qq.com', 'weibo.com',
        '163.com', 'sina.com.cn', 'sohu.com', 'ctrip.com', 'iqiyi.com',
        'bilibili.com', 'youku.com', 'zhihu.com', 'douyin.com', 'toutiao.com'
    ]

    def get_location(ip):
        try:
            response = geoip_reader.country(ip)
            return response.country.iso_code
        except:
            # 如果查询失败，默认返回 CN
            return 'CN'

    def test_proxy_speed(proxy):
        try:
            start_time = time.time()
            response = requests.get('http://www.gstatic.com/generate_204', proxies={'http': f'http://{proxy}', 'https': f'https://{proxy}'}, timeout=5)
            end_time = time.time()
            if response.status_code == 204:
                return (end_time - start_time) * 1000  # 返回延迟（毫秒）
            else:
                return float('inf')
        except:
            return float('inf')

    def get_fastest_proxy(location):
        proxies = get_proxies()
        fastest_proxy = min(proxies, key=lambda p: proxy_speeds.get(p, float('inf')))
        return fastest_proxy

    def update_proxy_speeds():
        proxies = get_proxies()
        for proxy in proxies:
            proxy_speeds[proxy] = test_proxy_speed(proxy)

    def is_peak_hours():
        current_hour = datetime.now().hour
        return 20 <= current_hour or current_hour < 1  # 高峰时间：晚上8点到凌晨1点

    def main(ctx, metadata):
        # 每10分钟更新一次代理速度
        if int(time.time()) % 600 == 0:
            update_proxy_speeds()

        domain = metadata['host']
        ip = metadata['dst_ip']
        port = metadata['dst_port']

        # 针对电信友好域名的优化
        if any(domain.endswith(d) for d in TELECOM_FRIENDLY_DOMAINS):
            return 'DIRECT'

        # 基于地理位置的路由
        location = get_location(ip)

        # 特定域名的路由规则
        if re.match(r'.*\.(netflix|youtube|google)\.com$', domain):
            return get_fastest_proxy('US')
        elif re.match(r'.*\.(baidu|taobao|jd)\.com$', domain):
            return 'DIRECT'

        # 基于端口的路由（例如，为 HTTPS 流量使用更安全的代理）
        if port == '443':
            return get_fastest_proxy(location)

        # 负载均衡和动态速度测试
        if location == 'CN':
            if is_peak_hours():
                # 在高峰时段，选择最快的国际代理
                return get_fastest_proxy('International')
            else:
                # 非高峰时段，直接连接
                return 'DIRECT'
        else:
            # 对于国际流量，始终选择最快的代理
            return get_fastest_proxy(location)

        # 默认路由
        return 'DIRECT'

    # 性能优化函数
    def optimize_for_telecom_gigabit(ctx):
        # 设置更大的缓冲区大小
        ctx.set_option('socket-buffer-size', 32 * 1024 * 1024)  # 32MB buffer

        # 启用 TCP BBR 拥塞控制算法
        ctx.set_option('tcp-congestion-controller', 'bbr')

        # 调整并发连接数（根据需要调整）
        ctx.set_option('max-concurrent-streams', 1000)

        # 启用 TFO (TCP Fast Open)
        ctx.set_option('tcp-fast-open', True)

        # 优化 DNS 设置
        ctx.set_option('dns-prefetch', True)
        ctx.set_option('dns-cache-size', 20000)

        # 启用 MPTCP (Multipath TCP) 如果可用
        ctx.set_option('mptcp', True)

        # 设置较大的 MTU
        ctx.set_option('mtu', 1492)  # 调整为适应PPPoE拨号

        # 启用 HTTP/3 和 QUIC
        ctx.set_option('enable-http3', True)

        # 优化 TLS 设置
        ctx.set_option('tls-session-caching', True)
        ctx.set_option('tls-session-timeout', 3600)

    # 在脚本初始化时调用优化函数
    optimize_for_telecom_gigabit(ctx)

#==========预解析域名==========
hosts:
  'mtalk.google.com': 108.177.125.188
  'dl.google.com': 180.163.151.161
  'dl.l.google.com': 180.163.151.161

#==========认证==========
authentication:
  - "user1:pass1"
  - "user2:pass2"

#==========多路径 TCP==========
mptcp:
  enabled: true
  scheduler: redundant

#==========自定义出站接口==========
interface-name: eth0

#==========TTL 伪装==========
fake-ip-range: 198.18.0.1/16
fake-ip-filter:
  - '*.lan'
  - 'localhost.ptlogin2.qq.com'

#==========API 支持==========
external-controller: 0.0.0.0:9090
external-ui: dashboard
secret: ''  # 如果不需要密码，可以留空

#==========延迟测试==========
url-test:
  url: http://www.gstatic.com/generate_204
  interval: 600  # 调整测试间隔为10分钟

#==========代理缓存==========
profile:
  store-selected: true

#==========流量统计==========
profile:
  tracing: true

#==========节点健康检查==========
health-check:
  enable: true
  interval: 600
  url: http://www.gstatic.com/generate_204

#==========长连接优化==========
keep-alive-interval: 30

#==========更多安全措施==========
# 使用 OpenClash 的默认设置，已根据您的要求替换或删除

#==========自定义出站IP==========
routing-mark: 6666  # 确保与 tun 和 experimental 部分一致

#==========更多性能优化==========
tunnel:
  tcp-keep-alive: 30
  tcp-no-delay: true

#==========日志设置==========
log-level: silent  # 禁用日志

#==========实验性功能==========
experimental:
  ignore-resolve-fail: true
  sniff-tls-sni: true
  tracing: true

